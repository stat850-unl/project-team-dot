---
format: html
editor: visual
---

```{r, eval = F}
# This code chunk contains code to install all of the dependencies
# necessary to compile and run your report, using if-statements to
# reduce install time for unnecessary code.
# It should be set to eval = F by default, so you aren't installing
# software on someone's computer without their consent.

# This works for packages that are on CRAN
if (!"dplyr" %in% installed.packages()) {
  install.packages("dplyr")
}
if (!"remotes" %in% installed.packages()) {
  install.packages("remotes")
}

# This is how to do it for a package that's only on github
#if (!"emo" %in% installed.packages()) {
 # remotes::install_github("hadley/emo")

```

## Introduction

This dataset contains information about the fiction bestseller list of **The New York Times** between the years **1931 to 2020**. This dataset includes the title, author(s), publication date, rank, and other information for every work recorded since the list's founding in 1931.

Every row in the dataset represents a single "entry"---a single slot for a particular week---on the list. There are usually ten or fifteen works listed each week. But the number of bestsellers the Times features in a given week varies, so there may be 3, 6, 7, 8, or 16.

It was collected from the **Tidy Tuesday Archive**. The source link is- https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-05-10/readme.md#nyt_titlestsv

There are 8 variables in nyt_titles and 6 variables in nyt_full. Here is a data dictionary showing each variable, the type of variable, units, and range of values that are possible:

nyt_full.tsv:

-    year - the year of appearance 

-   week - the weekly issue of the bestseller list 

-   rank - the book's rank on the list for that week 

-   title_id - a unique ID mapping titles to the nyt_titles spreadsheet 

-   title - title of the novel, as reported by the New York Times 

-   author - author of the novel, as reported by the New York Times

nyt_titles.tsv:

-   id - an arbitrary unique id for the novel

-    title - the title of the novel, as reported by the New York Times

-    author - the author of the novel, as reported by the New York Times 

-   year - the first year that the novel appears on the bestseller list. 

-   total_weeks - the total number of weeks the title was on the list 

-   first_week - the first week that the novel appears on the bestseller list 

-   debut_rank - the book's bestseller rank in the week of its first appearance

-   best_rank - the highest rank achieved by the title while on the list

The above dataset will be used to explore different topics that will help book lovers to find out which authors have occasionally stayed on top of the best sellers list based on the total number of weeks or how many times they appeared on the list. We are considering data from 2000 to 2020, and we would like to look into the relationship between the debut rank and the total number of weeks a book has been on the list. In the meantime, we want to show the distribution of variables (year, total_week,debut_rank) in terms of bestsellers and a shiny app to find books by their author name. 

We have two variables in our dataset which are the debut rank and best rank , but there were some anomalies where the best rank for some books was a value greater than the debut rank , maybe this was due to some incorrect data entries so we removed those records as a data cleaning process.

**Objectives of this whole analysis:**

-   Average Total Weeks on Bestseller List per Year

-   Distribution of variables (total_weeks, debut_rank)

-   Top 10 books and authors in the bestseller list for the most number of weeks

-   Highest number of weeks a book appeared in the list in each year 

-   Relationship between the Debut Rank of a book and the Total Number of weeks in the list

-   Top 10 authors in the list based on the number of appearances over the years

-   Debut rank distribution for the top 10 authors in the list based on the number of appearances over the years

-   Best rank distribution for the top 10 authors in the list based on the number of appearances over the years

-   Checking significant relationships of best_rank variable with total_weeks and debut_rank 

## Methods

> As there are 2 datasets, nyt_titles and nyt_full we combined the 2 datasets and obtained a single dataframe. We used the `left_join` function from [@dplyr-package] `dplyr` package and combined 2 datasets using the title_id. As we are only interested in bestseller books from 2000 to 2020, we filtered the records from 2000 to 2020 from the combined dataset using the `filter` function.

```{r, include = FALSE}
#| echo: false
# Get the Data

#tuesdata <- tidytuesdayR::tt_load('2022-05-10')
#tuesdata <- tidytuesdayR::tt_load(2022, week = 19)

#nyt_titles <- tuesdata$nyt_titles

# Or read in the data manually

nyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')
nyt_full <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_full.tsv')

library(dplyr)

#Combine the two dataframes
result <- nyt_full %>%
  left_join(select(nyt_titles,-year,-author,-title), by = c("title_id" = "id"))

# Filter rows with years from 2000 to 2020
filtered_data <- result %>%
  filter(year >= 2000&year<=2020)

```

> We created a new variable and added a new column called rank_difference by subtracting the best_rank from debut_rank. This is because there were some records where there were some errors in these two columns, therefore we only kept the rows where the best rank was a value less than or equal to the debut rank. We used the `filter` function from [@dplyr-package] `dplyr` package to do this. We used this dataset (filtered_final) to do our analysis. Since we wanted to check the correlation and fit a regression model we used this filtered dataset to explore our objectives.

```{r}
#| echo: false

#keeping only the records where the best rank is less than or equal to debut rank
filtered_final <- filtered_data %>%
  filter(best_rank <=debut_rank)

#creating the new column rank_difference
filtered_final <- filtered_final %>%
  mutate(rank_difference = debut_rank - best_rank)

```

> Our filtered_final dataset contains 13164 observations and 11 variables.

## Five number summary of 'total_weeks', 'debut_rank', 'best_rank' and their plot

```{r fig-1}
#| label: Five_number_summary_with_box_plot
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the Five number summary of 'total_weeks', 'debut_rank', 'best_rank' in the box plot in fig-1. I've used boxplot function to create boxplot and boxplot.stats to show outliers in the corresponding variable."
#| echo: false


# Five number summary of 'total_weeks', 'debut_rank', 'best_rank' and their plot

numeric_variables <- c('total_weeks', 'debut_rank', 'best_rank') 

# Get the five-number summary for each numeric variable
for (variable in numeric_variables) {
  cat(paste("Five-number summary for", variable, ":\n"))
  print(summary(filtered_final[[variable]]))
  cat("\n")
}

# Create boxplots for each numeric variable
par(mfrow = c(1.75, length(numeric_variables)))

for (variable in numeric_variables) {
  # Create the boxplot
  boxplot_obj <- boxplot(filtered_final[[variable]], main = variable, col = "red", border = "black", horizontal = TRUE)
  
  # Add lines for five numbers
  abline(h = boxplot_obj$stats[1], col = "yellow", lty = 2)  # Min
  abline(h = boxplot_obj$stats[2], col = "green", lty = 2)  # 1st Quartile
  abline(h = boxplot_obj$stats[3], col = "lightcoral", lty = 2)  # Median
  abline(h = boxplot_obj$stats[4], col = "orange", lty = 2)  # 3rd Quartile
  abline(h = boxplot_obj$stats[5], col = "purple", lty = 2)  # Max
  
  # Identify outliers
  outliers <- boxplot.stats(filtered_final[[variable]])$out
  
  # Highlight outliers in the plot
  points(outliers, rep(1, length(outliers)), pch = 19, col = "blue")
  
}

# Reset the plotting layout
par(mfrow = c(3, 3))

```

***Interpretation:***

We have created @Five_number_summary_with_box_plot to show the summary of numeric variable of this data set.

Five-number summary for total_weeks :

Min. 1st Qu. Median Mean 3rd Qu. Max.

1.00 5.00 8.00 18.75 15.00 178.00

Five-number summary for debut_rank :

Min. 1st Qu. Median Mean 3rd Qu. Max.

1.000 6.000 9.000 9.184 13.000 17.000

Five-number summary for best_rank :

Min. 1st Qu. Median Mean 3rd Qu. Max.

1.000 1.000 2.000 2.899 4.000 16.000

These Boxplots represent the interquartile range (IQR), which contains the middle 50% of the data for *total_weeks*, *debut_rank*, and *best_rank* variables on the NY Times best seller list.

The black line inside the box represents the median of the data. Min/Max (Yellow and Purple) dashed lines represent the minimum and maximum values of the data. Quartile (Green, Black, and Orange) dashed lines represent the 1st quartile, median, and 3rd quartile, respectively.

Whiskers: Indicate the range of the data. Typically, 1.5 times the IQR from the first and third quartiles. Outliers: Individual points beyond the whiskers are shown in the blue color. There are outliers in total_week and best_rank variables but not in debut_rank which means some data points on deviated from the mean value a lot for total_week and best_rank variables.

## Line plot of the average total_weeks per year

```{r fig-2}
#| label: Avg_Total_Weeks_per_year
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the relationship between Average Total Weeks on Best Seller List per Year in fig-2. I've used geom_line to create line plot and geom_point to show the exact point on the corresponding year. as the data are measured in relatively consistent increments. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false


# Calculate the average total_weeks per year
average_weeks_per_year <- filtered_final %>%
  group_by(year) %>%
  summarise(average_total_weeks = mean(total_weeks, na.rm = TRUE))
library(ggplot2)

# Create a line plot
ggplot(average_weeks_per_year, aes(x = year, y = average_total_weeks, group = 1)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "black", size = 3) +
  labs(title = "Average Total Weeks on Best Seller List per Year",
       x = "Year",
       y = "Average Total Weeks") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

***Interpretation:*** We tried to see on average which year has most of the Total Weeks on the Best Seller List. The @Avg_Total_Weeks_per_year line plot shows that the average total weeks was highest in 2004 and lowest in 2007 although the average was the same for 2011 and 2012. The number of average total weeks mostly increased by approximately 56% from 2002 to 2003 and decreased by 41% from 2005 to 2006.

### Total week distribution plot with outliers

```{r fig-3}
#| label: Total_Weeks_distribution_plot
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the Distribution of Total Weeks on Best Seller List in fig-3. I've used geom_density to show the distribution and geom_line to indicate the mean value in this plot. I have also used geom_point, geom_linerang and geom_text to indicate the outliers in this plot. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false

library(ggplot2)

# Calculate interquartile range (IQR) for total_weeks
iqr <- IQR(filtered_final$total_weeks, na.rm = TRUE)

# Define upper and lower bounds for outliers
upper_bound <- quantile(filtered_final$total_weeks, 0.75) + 1.5 * iqr
lower_bound <- quantile(filtered_final$total_weeks, 0.25) - 1.5 * iqr

# Identify outliers
outliers <- subset(filtered_final, total_weeks > upper_bound | total_weeks < lower_bound)

# Plot the distribution with outliers highlighted using geom_linerange and geom_text
ggplot(filtered_final, aes(x = total_weeks)) +
  geom_density(fill = "red", alpha = 0.5) +
  geom_vline(aes(xintercept = mean(total_weeks)), color = "blue", linetype = "dashed", size = 1) +
  geom_linerange(data = outliers, aes(x = total_weeks, ymin = 0, ymax = 0.02, color = title),
                 size = 1, show.legend = "line") +
  geom_text(data = outliers, aes(x = total_weeks, y = 0.03, label = title, color = title),
            vjust = 0, hjust = ifelse(outliers$total_weeks > 80, 0.5, 1),
            angle = ifelse(outliers$total_weeks > 80, 90, 0),
            size = 3, show.legend = "text") +
  labs(title = "Distribution of Total Weeks on Best Seller List with Outliers",
       x = "Total Weeks",
       y = "Density") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0, by = 10)) +
  scale_color_manual(values = rainbow(length(unique(outliers$title))))


```

***Distribution of Total Weeks on Best Seller List with Outliers:***

This @Total_Weeks_distribution_plot represents the distribution of the total number of weeks each book has spent on the bestseller list.The plot helps to identify which books deviate significantly from the typical pattern in terms of the total weeks on the bestseller list. Here, x axis shows the total weeks on the bestseller list. The scale indicates the range of weeks, and the breaks give reference points.

-   The red shaded area represents the density distribution of the total weeks on the bestseller list. It gives an overview of how the values are distributed across the range. Here, vertical Blue Dashed Line is indicating the average number of total weeks. This graph helps to understand the central tendency of the data.

-   Some outliers are also visible in this plot. The multicolored vertical line represent the outliers of the book names which stayed more than 80 weeks in the data.The text labels provide the titles of these outlier books.

### Outlier bar chart with specific book

```{r fig-4}
#| label: Outlier_bar_chart_with_specific_book
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the Outlier bar chart with specific book on Best Seller List in fig-4. I've used geom_bar to show the books who were appered as outliers in the total_weeks distribution plot.The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false

# Create a data frame with book titles and total_weeks for outliers
outliers_table <- data.frame(Book_Title = outliers$title, Total_Weeks = outliers$total_weeks)

# Arrange the data in descending order based on Total_Weeks
outliers_table <- outliers_table[order(-outliers_table$Total_Weeks), ]

# Create a bar plot to visualize outliers
library(ggplot2)
ggplot(outliers_table, aes(x = reorder(Book_Title, -Total_Weeks), y = Total_Weeks, fill = "red")) +
  geom_bar(stat = "identity") +
  labs(title = "Books with Total Weeks Outliers",
       x = "Book Title",
       y = "Total Weeks") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

***Interpretation:*** This @Outlier_bar_chart_with_specific_book provides a visual summary of the distribution of total weeks, highlighting books that deviate significantly from the overall pattern.

The bars represent individual books, and their heights indicate the total weeks each book stayed on the bestseller list. Outliers books with unusually high total weeks, are easily identified by observing bars that stand out from the rest. Books with similar total weeks have bars at similar heights.

### Correlation Between Debut Rank and Total Weeks

```{r fig-5}
#| label: Correlation_Between_Debut_Rank_and_Total_Weeks
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the relationship between Debut Rank and Total Weeks in fig-5. I've used geom_point to show that total weeks point with corresponding debut rank. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false

# Calculate the correlation between Total Weeks and Debut Rank
correlation_value <- cor(filtered_final$total_weeks, filtered_final$debut_rank)

# Print the correlation value
cat("Correlation between Total Weeks and Debut Rank:", correlation_value, "\n")

library(ggplot2)

# Calculate the correlation between Debut Rank and Total Weeks
correlation_value <- cor(filtered_final$debut_rank, filtered_final$total_weeks)

# Print the correlation value
cat("Correlation between Debut Rank and Total Weeks:", correlation_value, "\n")

# Plot a scatter plot
ggplot(filtered_final, aes(x = debut_rank, y = total_weeks)) +
  geom_point(color = "skyblue", size = 3) +
  labs(title = "Relationship Between Debut Rank and Total Weeks",
       x = "Debut Rank",
       y = "Total Weeks on List") +
  theme_minimal()
```

***Interpretation:*** @Correlation_Between_Debut_Rank_and_Total_Weeks is: -0.08535088 which is very weak and negatively correlated. So we can make the decision that books that debut at a higher rank don't necessarily tend to stay on the list longer. Actually no relation between debut rank and total weeks

### Regression analysis and Coefficient box Plot

```{r fig-6 }
#| label: Coefficient_box_Plot
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the coeffecient box plot from the regression model in fig-6. I've used geom_bar and geom_error bar. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false

# Fit a linear regression model
regression_model <- lm(best_rank ~ total_weeks + debut_rank, data = filtered_final)

# Print the summary of the regression model
summary(regression_model)

library(car)

# Fit a linear regression model
model <- lm(best_rank ~ total_weeks + debut_rank, data = filtered_final)

# Calculate VIF
vif_values <- car::vif(model)

# Print the VIF values
print(vif_values)

# Extract coefficients and standard errors
coefficients <- coef(regression_model)
se <- summary(regression_model)$coefficients[, "Std. Error"]

# Create a data frame for plotting
bar_data <- data.frame(
  Coefficient = names(coefficients),
  Estimate = coefficients,
  Std.Error = se
)

# Plot
library(ggplot2)
ggplot(bar_data, aes(x = Coefficient, y = Estimate, ymin = Estimate - 1.96 * Std.Error, ymax = Estimate + 1.96 * Std.Error)) +
  geom_bar(stat = "identity", position = "dodge", fill = "skyblue", color = "black") +
  geom_errorbar(width = 0.2, position = position_dodge(0.9)) +
  labs(title = "Coefficient Plot",
       y = "Estimate",
       x = "Coefficient") +
  theme_minimal()

```

***Regression:*** Overall, the model seems to suggest that both total_weeks and debut_rank are significant predictors of best_rank. However, it's important to note that the low R-squared value indicates that there is still a large amount of unexplained variance, and the relationship between the predictors (total_weeks and debut_rank) and best_rank may be partially captured by the linear model.

By analyzing this regression model, we have found that to secure the best rank on the New York Times best-seller list, staying on that list for more weeks has a significant impact, and also same effect goes for debut rank as well.

**Checking Multicollinearity:** As both VIF value \<5, there is no multicollinearity on the predictor variable (total week and debut rank)

Next we wanted to explore the variables best_rank, debut_rank and total_weeks. As these variables do not depend on the week,the book appeared on the list, we filtered the dataset by keeping only the distinct title ids and carried out the rest of the analysis using this dataset.

### Top **10 books and authors in the bestseller list for the most number of weeks**

```{r fig-7}
#| label: Top_10_books_for_most_no_of_weeks
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: " This figure shows the top 10 books in the bestseller list for the most number of weeks. We have obtained the top 10 titles by arranging the total weeks in descending order and extracting the top 10 records. This plot was drawn from geom_bar in the 'ggplot2' [@ggplot2-package]. As the titles of the books are too long we have added a legend with the book titles to have a more clear and effective visualization."
#| echo: false

library(dplyr)

top_10_records1 <- filtered_final %>%
  arrange(desc(total_weeks)) %>%
  distinct(title_id, .keep_all = TRUE) %>%
  slice(1:10)

library(ggplot2)
# Reordering 'title' by 'total_weeks' in descending order
top_10_records1$title <- factor(top_10_records1$title, levels = top_10_records1$title[order(-top_10_records1$total_weeks)])

# Create a new column 'label' to assign labels from 1 to 10 for bars on the x-axis
top_10_records1$label <- factor(1:10, labels = 1:10)

# Plotting the bar graph
plot <- ggplot(top_10_records1, aes(x = label, y = total_weeks, fill = title)) +
  geom_bar(stat = "identity") +
  labs(x = "Books", y = "Total Weeks", title = "Top 10 books in the bestseller list for the most number of weeks") +
  theme(axis.text.x = element_text(angle = 360, vjust = 0.5, hjust = 1))

# Adding a legend for titles
plot + guides(fill = guide_legend(title = "Books"))

```

According to this figure @Top_10_books_for_most_no_of_weeks we can see that the book "Oh, the places you will go!" is the book that appeared in the bestseller list for the most number of weeks. This book appeared in the list for 178 weeks. The book "The Da Vinci Code" is also among the top books having appeared in the list for 165 weeks. The books "Harry Potter and the Sorcerer's stone", "Gone girl" and "The girl who kicked the hornet's nest" were in the bestseller list for almost a similar number of weeks.

```{r fig-7}
#| label: Top_10_authors_for_most_no_of_weeks
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: " This figure shows the top 10 authors in the bestseller list for the most number of weeks. We have obtained the corresponding author for each top 10 books obtained above. This plot was drawn from geom_bar in the 'ggplot2' [@ggplot2-package]. As the titles of the books are too long we have added a legend with the book titles to have a more clear and effective visualization."
#| echo: false

# For authors

library(ggplot2)

# Reorder 'author' in reverse for plotting
top_10_records1$author <- factor(top_10_records1$author, levels = rev(top_10_records1$author))

# Plotting the bar chart
ggplot(top_10_records1, aes(x = author, y = total_weeks)) +
  geom_bar(stat = "identity", fill = "navyblue") +
  labs(title = "Top 10 authors in the bestseller list for the most number of weeks",
       x = "Author",
       y = "Total Weeks") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()


```

In this figure @Top_10_authors_for_most_no_of_weeks we can see that, Dr. Seuss and Dan Brown who are the authors of the books "Oh, the places you will go!" and "The Da Vinci Code" are the top authors who appeared in the list for the most number of weeks. 

### **Highest number of weeks a book appeared in the list based on the first year book entered to the list**

```{r fig-8}
#| label: Highest_no_of_weeks_by_first_year
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the highest number of weeks that a book appeared in the list based on the first year it appeared in the list. We have separated the year from the variable first_week and created the first_year variable. We have used the group_by function to find the book with the highest number of total weeks for each first year. The line chart was drawn from geom_line in the 'ggplot2'[@ggplot2-package] and it shows how the highest number of weeks a book appeared in the list changes based on the first year it appeared on the list. A list was created to show the name of the top book for each first year separately and using grid.arrange function in 'gridExtra' [@gridExtra-package]these 2 plots were arranged side by side."
#| echo: false


# obtaining the first year
library(lubridate)
filtered_final$first_year<- year(filtered_final$first_week)

# Group data by 'first_year' and find the book with the highest total_weeks
highest_total_weeks_per_year <- filtered_final %>%
  group_by(first_year) %>%
  arrange(desc(total_weeks)) %>%
  slice(1) %>%
  ungroup()

# Create a dataframe with the required columns
weeks_per_year <- highest_total_weeks_per_year %>%
  select(first_year, title_id, title, author, total_weeks)

library(ggplot2)
library(gridExtra)

# Convert 'year' column to numeric
highest_total_weeks_per_year$first_year <- as.numeric(weeks_per_year$first_year)

# Check for any non-finite values
any(!is.finite(weeks_per_year$first_year))  # Check for non-finite values

# Plot 1: Line graph for year and total weeks
plot1 <- ggplot(weeks_per_year, aes(x = first_year, y = total_weeks)) +
  geom_line(aes(color = "Total Weeks"), size = 1.5, show.legend = FALSE) +
  labs(
    title = "Highest number of weeks based on the first year book appeared in the list", 
    x = "First year appeared in the list",
    y = "Total Weeks"
  ) +
  scale_x_continuous(breaks = seq(min(weeks_per_year$first_year, na.rm = TRUE), max(weeks_per_year$first_year, na.rm = TRUE), by = 2)) +
  scale_color_manual(values = c("Total Weeks" = "maroon")) +
  geom_point(color = "black", size = 3) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = 10,face = "bold"))

# Plot 2: Displaying year along with top book titles
plot2 <- ggplot() +
  geom_blank() +
  labs() +  
  theme_void()

# Create text to display year and top book titles
for (i in 1:nrow(weeks_per_year)) {
  plot2 <- plot2 +
    annotate(
      "text",
      x = 0.5, y = 1 - (i - 1) * 0.05,
      label = paste(weeks_per_year$first_year[i], "-", weeks_per_year$title[i]),
      size = 2  
    )
}

# Arrange plots side by side in a single row with a separator line
grid.arrange(
  plot1, plot2,
  ncol = 2, widths = c(0.7, 0.3),
  layout_matrix = rbind(c(1, 2), c(1, 2)), heights = c(1, 0.01)
)




```

From this figure @Highest_no_of_weeks_by_first_year  we can see that out of the books that entered to the list in 1990, the book "Oh, the places you will go!" appeared on the list for the most number of weeks with 178 weeks. The book "The Da Vinci Code" which appeared in the list in 2003 for the first time was in the list for 165 weeks. Out of the books that entered to the list for the first time in 2005, the book  "The mermaid chair" was in the list for most weeks, but it is the lowest number of weeks compared with other years. 

### Top 10 authors in the list based on the number of appearances over the years

```{r fig-10}
#| label: fig-top-ten-based-on-num-of-appearence
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows a word cloud for the top ten authors who appeared in the list for the most number of times. We grouped the cleaned dataset by the author and counted the number of times they appeared on the list. Then we got the top ten authors and created a word cloud to visualise this.Here the size of the word represents the amount of times they appeared on the list.This plot was drawn from wordcloud in the `wordcloud` [@wordcloud-package]. "
#| echo: false
library(wordcloud)

# Group by author and count the occurrences
author_appearances <- filtered_final %>%
  group_by(author) %>%
  summarise(appearances = n())

# Get the top ten authors with the highest number of appearances
top_ten_authors <- author_appearances %>%
  top_n(10, appearances)

# Create a color palette for each author
author_colors <- rainbow(length(top_ten_authors$author))

# Word Cloud with Different Colors for Each Author
wordcloud(words = top_ten_authors$author, freq = top_ten_authors$appearances, scale = c(3, 0.5), colors = author_colors)


```

When comparing this @fig-top-ten-based-on-num-of-appearence to the @Top_10_books_for_most_no_of_weeks that we drew , we can see that the authors who were considered as the top ten based on the total number weeks on the list and the number of times they appeared on the list is different. Hence, we can say that the authors who stay on the list for a long time are consistently popular, while those who appear frequently might become popular quickly, even if it's not for a long time. This shows that successful authors have different ways of being popular.

### Debut rank distribution for the top 10 authors in the list based on the number of appearances over the years

```{r fig-11}
#| label: fig-debut-rank-distribution-for-above-top-ten
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the box plots of the debut rank distribution for the top ten authors who appeared in the list for the most number of times. We filtered the data of these ten authors from the cleaned dataset and drew a box plot for each author with a different color. This plot was drawn from geom_boxplot in the `ggplot2` [@ggplot2-package]."
#| echo: false


library(ggplot2)
##Comparing the debut ranks for the top ten authors based on the appearences in the list
ggplot(filtered_final %>% filter(author %in% top_ten_authors$author), aes(x = author, y = debut_rank, fill = author)) +
  geom_boxplot() +
  labs(title = "Box Plot: Debut Ranks for Top Ten Authors",
       x = "Author",
       y = "Debut Rank",
       fill = "Author") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Using this @fig-debut-rank-distribution-for-above-top-ten we can say that all of these authors did not get a a rank below five when their book first appeared on the list. Most of the books have ranked between 6 and 15 for most of them. Also we can see that Mitch Albom appeared on the list for a long time, but he only has a very few books compared to the other authors. He has only written a few books but they managed to made it to the list a number of times.

### Best rank distribution for the top 10 authors in the list based on the number of appearances over the years

```{r fig-12}
#| label: fig-best-rank-distribution-for-above-top-ten
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the jitter plots of the best rank distribution for the top ten authors who appeared in the list for the most number of times. We filtered the data of these ten authors from the cleaned dataset and drew a jitter plot for each author with a different color.This plot was drawn from geom_jitter in the `ggplot2` [@ggplot2-package]."
#| echo: false


library(ggplot2)
##Best rank distribution for the top ten authors based on the appearences in the list
ggplot(filtered_final %>% filter(author %in% top_ten_authors$author), aes(x = author, y = best_rank, color = author)) +
  geom_jitter(alpha = 0.7) +
  labs(title = "Jitter Plot: Best Rank Distribution for Top Ten Authors",
       x = "Author",
       y = "Best Rank",
       color = "Author") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

In this @fig-best-rank-distribution-for-above-top-ten figure, we can see that Danielle Steel has a higher variability but this can be due to the difference in the number of books of each author. We can say that some of the books of that author did extremely well. Also, John Grisham has most of his books in the top three.Mitch Albom wrote a relatively small number of books, but still he has managed to be among the top three best sellers.

You can find additional information about formatting figures generated from code in the [quarto documentation](https://quarto.org/docs/authoring/figures.html#computations).

## Additional Exploration topic

##Shiny App: We have created a shiny graph to search the book according to the author. If anyone is interested to know the name of the author of any particular book, he/she will find this easily. This makes easy for anyone to search the author and see which books that particular author wrote.

Add another topic here... as many as you desire, really. Make sure to include a transition between the two sections that connects the two with some sort of logical train of thought.

## Conclusion

The study revealed some intriguing details about a few books that made the best-seller list and for which the total weeks distribution graph was mostly rightly skewed. "The Da Vinci Code" and "Oh, the Places You Will Go!" were viewed for 165 and 178 weeks, respectively.

Those two books are the top books that appeared in the bestseller list for the most number of weeks. Dr. Seuss and Dan Brown who are the authors of these 2 books are the top authors who appeared in the list for the most number of weeks during the years 2000-2020.

The book "Oh, the places you will go!" first entered to the list in 1990 and was able to be in the bestseller list for more than 3 years.

The top ten authors based on the total frequency they appeared in the bestseller list during the years 2000 -2020 did not have the highest number of weeks in the list but they made it to the list alot of times. This implies that the author's fame and success are based on how many times their work appears on the list and how long it remains there. Certain authors, such as Mitch Albom, had relatively few novels on the bestseller list, yet they were able to make frequent appearances for the few works they did write.

There is a negative correlation between debut rank and total weeks, meaning that books with higher debut ranks don't necessarily stay on the best-seller list. The regression model indicates that staying on the list for a higher number of weeks is necessary to secure the top spot on the New York Times best-seller list.

It is evident from the distribution of the best rank (@fig-best-rank-distribution-for-above-top-ten) that Danielle Steel's ranks have the largest variability. Additionally, the majority of John Grisham's books were among the top three bestsellers. Mitch Albom wrote a relatively small number of books, but still he has managed to be among the top three best sellers.

The majority of these authors had strong debut ranks, as can be seen by glancing at their debut rankings. Additionally, some of their publications debuted between the ranks of 14 and 16, which is essentially in the top 20.

```         
```
