---
title: "Analysis"
format: html
editor: visual
---

```{r}
# Get the Data

tuesdata <- tidytuesdayR::tt_load('2022-05-10')
tuesdata <- tidytuesdayR::tt_load(2022, week = 19)

nyt_titles <- tuesdata$nyt_titles

# Or read in the data manually

nyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')
nyt_full <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_full.tsv')
```

```{r}
library(dplyr)

#Combine the two dataframes
result <- nyt_full %>%
  left_join(select(nyt_titles,-year,-author,-title), by = c("title_id" = "id"))

# Filter rows with years from 2000 to 2020
filtered_data <- result %>%
  filter(year >= 2000&year<=2020)

```

***G-1: How the best rank differs from the debut rank.***

```{r}
library(skimr)
skim(filtered_data)

filtered_final <- filtered_data %>%
  filter(best_rank <=debut_rank)
filtered_final <- filtered_final %>%
  mutate(rank_difference = debut_rank - best_rank)

```

```         
```

```         
```

```         
```

```{r}

# Keep only one row per book
final_data <- filtered_final %>%
  distinct(title_id, .keep_all=TRUE)

```

```         
```

```{r}
library(dplyr)

# Group by title and summarize to find total weeks for each title, selecting top 10
weeks_per_title <- final_data %>%
  group_by(title_id, title) %>%
  summarise(total_weeks = sum(total_weeks)) %>%
  arrange(desc(total_weeks)) %>%
  top_n(10)

# Create a data frame with title_id, title, and total_weeks columns
selected_data <- data.frame(title_id = weeks_per_title$title_id,
                            title = weeks_per_title$title,
                            total_weeks = weeks_per_title$total_weeks)
top_10_records <- selected_data[1:10, ]


```

```{r}
library(ggplot2)

# Reorder 'title' by 'total_weeks' in descending order
top_10_records$title <- factor(top_10_records$title, levels = top_10_records$title[order(-top_10_records$total_weeks)])

# Plotting a bar graph for the top 10 records based on total_weeks in descending order
ggplot(top_10_records, aes(x = title, y = total_weeks)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(x = "Title", y = "Total Weeks", title = "Top 10 books in the bestseller list for the most number of weeks") +
 theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

```

```{r}

library(ggplot2)

# Reorder 'title' by 'total_weeks' in descending order
top_10_records$title <- factor(top_10_records$title, levels = top_10_records$title[order(-top_10_records$total_weeks)])

# Create a new column 'label' to assign labels from 1 to 10 for bars on the x-axis
top_10_records$label <- factor(1:10, labels = 1:10)

# Plotting a bar graph for the top 10 records based on total_weeks in descending order
plot <- ggplot(top_10_records, aes(x = label, y = total_weeks, fill = title)) +
  geom_bar(stat = "identity") +
  labs(x = "Books", y = "Total Weeks", title = "Top 10 books in the bestseller list for the most number of weeks") +
  theme(axis.text.x = element_text(angle = 360, vjust = 0.5, hjust = 1))

# Adding a legend for titles
plot + guides(fill = guide_legend(title = "Books"))




```

```{r}

```

```{r}
# For authors

# Extract titles from the top 10 records
top_10_titles <- top_10_records$title

# Filter 'book_data' for authors related to the top 10 titles and aggregate total_weeks for each author
authors_total_weeks <- final_data %>%
  filter(title %in% top_10_titles) %>%
  group_by(author) %>%
  summarise(total_weeks = sum(total_weeks))


```

```{r}
library(ggplot2)


# Reorder 'author' by 'total_weeks' in descending order
authors_total_weeks$author <- factor(authors_total_weeks$author, 
                                     levels = authors_total_weeks$author[order(-authors_total_weeks$total_weeks)])

# Plotting a bar graph for authors and their aggregated total_weeks in descending order
ggplot(authors_total_weeks, aes(x = author, y = total_weeks)) +
  geom_bar(stat = "identity", fill = "maroon") +
  labs(x = "Author", y = "Total Weeks", title = "Top 10 authors in the bestseller list for the most number of weeks") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

```

```{r}

library(ggplot2)

# Jitter plot with color representing years and separate plots for each year
ggplot(final_data, aes(x = debut_rank, y = total_weeks, color = as.factor(year))) +
  geom_jitter(alpha = 0.7) +
  labs(title = "Jitter Plot: Debut Rank vs Total Weeks on the List",
       x = "Debut Rank",
       y = "Total Weeks on the List",
       color = "Year") +
  theme_minimal() +
  facet_wrap(~ year, scales = "free")

```

```{r}
library(wordcloud)
# Group by author and count the occurrences
author_appearances <- final_data %>%
  group_by(author) %>%
  summarise(appearances = n())

# Get the top ten authors with the highest number of appearances
top_ten_authors <- author_appearances %>%
  top_n(10, appearances)

# Create a color palette for each author
author_colors <- rainbow(length(top_ten_authors$author))

# Word Cloud with Different Colors for Each Author
wordcloud(words = top_ten_authors$author, freq = top_ten_authors$appearances, scale = c(3, 0.5), colors = author_colors)

```

```{r}
##Comparing the debut ranks for the top ten authors based on the appearences in the list
ggplot(final_data %>% filter(author %in% top_ten_authors$author), aes(x = author, y = debut_rank, fill = author)) +
  geom_boxplot() +
  labs(title = "Box Plot: Debut Ranks for Top Ten Authors",
       x = "Author",
       y = "Debut Rank",
       fill = "Author") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
##Best rank distribution for the top ten authors based on the appearences in the list
ggplot(final_data %>% filter(author %in% top_ten_authors$author), aes(x = author, y = best_rank, color = author)) +
  geom_jitter(alpha = 0.7) +
  labs(title = "Jitter Plot: Best Rank Distribution for Top Ten Authors",
       x = "Author",
       y = "Best Rank",
       color = "Author") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
```{r}
library(ggplot2)


# Calculate the average total_weeks per year
average_weeks_per_year <- filtered_final %>%
  group_by(year) %>%
  summarise(average_total_weeks = mean(total_weeks, na.rm = TRUE))

# Create a line plot
ggplot(average_weeks_per_year, aes(x = year, y = average_total_weeks, group = 1)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "black", size = 3) +
  labs(title = "Average Total Weeks on Best Seller List per Year",
       x = "Year",
       y = "Average Total Weeks") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
ggplot(filtered_final, aes(x = debut_rank)) +
  geom_density(fill = "lightcoral", alpha = 0.5) +
  geom_vline(aes(xintercept = mean(debut_rank)), color = "blue", linetype = "dashed", size = 1) +
  labs(title = "Distribution of Debut Rank",
       x = "Debut Rank",
       y = "Density") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0, max(filtered_final$debut_rank), by = 2))

```
```{r}
max_weeks <- max(filtered_final$total_weeks, na.rm = TRUE)
ggplot(filtered_final, aes(x = total_weeks)) +
  geom_density(fill = "red", alpha = 0.5) +
  geom_vline(aes(xintercept = mean(total_weeks)), color = "blue", linetype = "dashed", size = 1) +
  labs(title = "Distribution of Total Weeks on Best Seller List",
       x = "Total Weeks",
       y = "Density") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0, max_weeks, by = 10))


```

```{r}
# Calculate the correlation between Total Weeks and Debut Rank
correlation_value <- cor(filtered_final$total_weeks, filtered_final$debut_rank)

# Print the correlation value
cat("Correlation between Total Weeks and Debut Rank:", correlation_value, "\n")

```

```{r}
library(ggplot2)

# Calculate the correlation between Debut Rank and Total Weeks
correlation_value <- cor(filtered_final$debut_rank, filtered_final$total_weeks)

# Print the correlation value
cat("Correlation between Debut Rank and Total Weeks:", correlation_value, "\n")

# Plot a scatter plot
ggplot(filtered_final, aes(x = debut_rank, y = total_weeks)) +
  geom_point(color = "skyblue", size = 3) +
  labs(title = "Relationship Between Debut Rank and Total Weeks",
       x = "Debut Rank",
       y = "Total Weeks on List") +
  theme_minimal()

```
comment:
Correlation between Total Weeks and Debut Rank: -0.08535088 which is very week and negatively correlated. So we can make decision that books which debut at a higher rank doesn't necessarily tend to stay on the list longer. Actually no relation between debut rank and total weeks

```{r}

# Fit a linear regression model
regression_model <- lm(best_rank ~ total_weeks + debut_rank, data = filtered_final)

# Print the summary of the regression model
summary(regression_model)

```
comment:
Overall, the model seems to suggest that both total_weeks and debut_rank are significant predictors of best_rank. However, it's important to note that the low R-squared value indicates that there is still a large amount of unexplained variance, and the relationship between the predictors (total_weeks and debut_rank) and best_rank may not be entirely captured by the linear model.
```{r}
# Load the 'car' package for VIF calculation
library(car)

# Fit a linear regression model
model <- lm(best_rank ~ total_weeks + debut_rank, data = filtered_final)

# Calculate VIF
vif_values <- car::vif(model)

# Print the VIF values
print(vif_values)

```
comment: As both VIF value<5, there is no multicollinearity.
```{r}
# Extract coefficients and standard errors
coefficients <- coef(regression_model)
se <- summary(regression_model)$coefficients[, "Std. Error"]

# Create a data frame for plotting
bar_data <- data.frame(
  Coefficient = names(coefficients),
  Estimate = coefficients,
  Std.Error = se
)

# Plot
library(ggplot2)
ggplot(bar_data, aes(x = Coefficient, y = Estimate, ymin = Estimate - 1.96 * Std.Error, ymax = Estimate + 1.96 * Std.Error)) +
  geom_bar(stat = "identity", position = "dodge", fill = "skyblue", color = "black") +
  geom_errorbar(width = 0.2, position = position_dodge(0.9)) +
  labs(title = "Coefficient Plot",
       y = "Estimate",
       x = "Coefficient") +
  theme_minimal()


```






